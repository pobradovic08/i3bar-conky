#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Cryptocompare parse API data
#
# Read fetched data from input file
# This file is generated by cryptocompare-get-api-data script
# Should be in crontab for desired update interval
#
# Copyright (C) 2017  Pavle Obradovic (pajaja)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
import sys
from os.path import expanduser

reload(sys)
sys.setdefaultencoding('utf8')


def get_cur_symbol(currency):
    """
    Return symbol for given currency
    :param currency:
    :return:
    """
    if currency == 'USD':
        return '$'


def get_trend_symbol(indicator):
    """
    Return symbol for given indicator (change)
    :param indicator:
    :return:
    """
    if indicator > 0:
        return '▼'
    elif indicator < 0:
        return '▲'
    else:
        return '━'


def get_conky_string(text, indicator):
    """
    Get colored text depending on the (change) indicator
    :param text:
    :param indicator:
    :return:
    """
    color = ""
    if indicator > 0:
        color = ' color=\'#ffbaba\''
    elif indicator < 0:
        color = ' color=\'#baffba\''

    return '<span%s font_desc=\'ClearSans Bold\'>%s</span>' % (color, text)

# Open file written by cryptocompare-get-api-data and read it
data_file = open(expanduser('~/.cryptocompare-last'), 'r')
file_contents = data_file.read()

# There should be 2 arguments provided:
# 1. From currency
# 2. To currency
if len(sys.argv) == 3:
    # User selected coin
    from_coin = sys.argv[1].upper()
    to_coin = sys.argv[2].upper()

    # Parse json for all coins
    data = json.loads(file_contents)

    # Separate data just for selected coin
    if from_coin in data['new']:

        # Build return string
        if to_coin in data['new'][from_coin]:
            value = data['new'][from_coin][to_coin]
            indicator = 0

            # Calculate change indicator
            if from_coin in data['old']:
                indicator = data['old'][from_coin][to_coin] - value

            # Print string for conky
            print get_conky_string("%s %s%s" % (
                    get_trend_symbol(indicator),
                    get_cur_symbol(to_coin),
                    value), indicator)
            exit(0)

print "N/A"
